class Solution {
    private boolean check(String s , String s1){
        int l = s.length();
        int l1 = s1.length();
        if (l != l1) {
            return false;
        }
        HashMap<Character, Integer> map = new HashMap<>();
        HashMap<Character, Integer> map1 = new HashMap<>();

        for (int i = 0; i < l; i++) {
            if (!map.containsKey(s.charAt(i))) {
                map.put(s.charAt(i), 1);
            } else {
                int val = map.get(s.charAt(i));
                map.put(s.charAt(i), val + 1);
            }
        }

        for (int i = 0; i < l1; i++) {
            if (!map1.containsKey(s1.charAt(i))) {
                map1.put(s1.charAt(i), 1);
            } else {
                int val = map1.get(s1.charAt(i));
                map1.put(s1.charAt(i), val + 1);
            }
        }

        return map.equals(map1);
    }
    public List<String> removeAnagrams(String[] words) {
        List<String> list = new ArrayList<>(Arrays.asList(words));
            for (int i = list.size() - 1; i > 0; i--) {
            if (check(list.get(i), list.get(i - 1))) {
                list.remove(i);
            }
        }

        return list;
    }
}
