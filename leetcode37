class Solution {
       public boolean isSafe(int row, int col, char[][] board, char digit) {
    for(int j = 0; j < 9; j++) {
        if(j != col && board[row][j] == digit)
            return false;}
    for(int i = 0; i < 9; i++) {
        if(i != row && board[i][col] == digit)
            return false;
    }
    int sr = (row / 3) * 3;
    int sc = (col / 3) * 3;
    for(int m = sr; m < sr + 3; m++) {
        for(int n = sc; n < sc + 3; n++) {
            if(m == row && n == col) continue; 
            if(board[m][n] == digit)
                return false;}}
    return true;}
public boolean helper(int row , int col , char[][] board){
    if(col == 9){      
        row++;
        col = 0;}
    if(row == 9){     
        return true;}
    if(board[row][col] != '.'){
        return helper(row, col+1, board); }
    for(char digit = '1'; digit <= '9'; digit++){     
        if(isSafe(row, col, board, digit)){
            board[row][col] = digit;
            if(helper(row, col+1, board)){
                return true;}
            board[row][col] = '.';}
    }
    return false;}
    public void solveSudoku(char[][] board) {
        helper(0,0,board);
}
}
