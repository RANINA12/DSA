class Solution {

    public List<List<Integer>> combination(int[] candidates, int target , int i , List<Integer> list ,List<List<Integer>> ansList){
        if(i>=candidates.length || target<0){
            return ansList;
        }

        if(target==0){
             ansList.add(new ArrayList<Integer>(list));
             return ansList;
        }
        // base conditions
        list.add(candidates[i]);
         //combination(candidates , target-candidates[i] , i+1 ,list, ansList);
         combination(candidates , target-candidates[i] , i , list, ansList);
         //backtrack 
         list.remove(list.size()-1);
         combination(candidates , target , i+1 ,list, ansList);
        return ansList;
    }
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ansList = new ArrayList<>();

       return combination(candidates , target , 0 ,new ArrayList<>(), ansList);
     
    }
}
